Metadata-Version: 2.1
Name: vpltools
Version: 0.17
Summary: Facilitates Moodle VPL use by providing extensible subclasses of unittest.TestCase working directory for other python files.
Author-email: William Bailey <william.bailey@centre.edu>
Project-URL: Homepage, https://github.com/wba234/baileycs1
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE.txt

# About VPLTools
VPLTools is a package for writing tests which work with the VPL Moodle plugin. Test code is--naturally--written in Python, but VPLTools enables end-to-end testing of programs written in other languages too.

## Key Features
VPLTools seeks to make implementing VPL assignments as easy as possible. Most of its features are available as part of the ```VPLTestCase``` class, which should be extended to create tests, like your would with Python's ```unittest.TestCase```. The ```VPLTestCase``` class provides a number of features:
- automatic detection, and when necessary, compilation of student files. This means that you can write end-to-end tests which allow students to use any programming language supported by VPLTools.
- automatic importing of key and student Python programs as modules
- automatic generation the ```vpl_evaluate.cases``` file, including cases for a style check using PyLint.

## Usage
### Directory Setup
It is recommended that you use a separate directory for each assignment. A typical directory structure might look like this:
```text
temperature_conversion_lab
├── assignment_description.html
├── temp_conversion_starter_code.py
├── test_f2c.py
├── f2c_key.py
├── buggy_f2c.py
└── vpl_evaluate.cases
```
- ```assignment_description.html``` is the assignment prompt for students.
- ```temp_conversion_starter_code.py``` is code for students to build on.
- ```test_f2c.py``` contains the ```vpltools.VPLTestCase``` which implements the tests.
- ```f2c_key.py``` is the instructor's solution.
- ```buggy_f2c.py``` is a simulated student submission, to run the tests on.
- ```vpl_evaluate.cases``` is the file describing which tests the VPL plugin should run.

**When posting a VPL assignment**, remember to upload:
- the test file
- the key program, if referenced by the test file
- ```vpl_evaluate.cases```
You also need to enable the ***keep files when running*** option for each of these.

### Write Tests
Test file names should start with "test" and be located in the same directory as your answer key program, and any simulated student submissions to run the tests on. Write tests as your normally would with Python's ```unittest``` module. The ```vpl_evaluate.cases``` file is generated automatically (in ```tearDownClass```) when the set of test cases runs to completion. 

In addition to the features of the ```unittest``` package, you can use the following attributes and functions provided by ```VPLTestCase```:
   #### Important Methods
   - ```run_student_program()``` - Call this to execute the student's program in a subprocess.
   - ```run_key_program()``` - Call this to execute the solution program in a subprocess.

   #### Important Attributes
   - ```key_source_files: list[str]``` - Set this in class scope to tell VPLTools which files in the local directory are part of the solution program. Can be empty.
   - ```ignore_files: list[str]``` - Set this in class scope to tell VPLTools which files in the local directory should be ignored.
   - ```student_py_module: ModuleType | None``` - Access this to invoke student functions directly (Python submissions only).
   - ```key_py_module: ModuleType | None``` - Access this to invoke solution program functions directly (Python solutions only).
   - ```STUDENT_OUTFILE_NAME: str``` - Predefined name for student output files. This must be passed as an argument to student programs when invoking them with ```run_student_program()```.
   - ```KEY_OUTFILE_NAME: str:``` - Predefined name for solution program output files.
   - ```skip_basic_tests: list[function]``` - Define a list of basic tests from ```vpltools.basic_tests.BASIC_TESTS``` to skip when importing student Python programs. To skip all, set to ```vpltools.BASIC_TESTS```.
   - ```include_pylint : bool``` - Flag to include a VPL case which runs the PyLint static analyzer on student's submission, and passes only if PyLint is completely happy (Python only).


## Example Usage - Python Unit Testing
```python
import unittest
import vpltools

__unittest = True

class TestF2C(vpltools.VPLTestCase):
    key_source_files = [ "f2c_key.py", ]
    ignore_files = [ "temp_conversion_starter_code.py", ]

    def mainAssertLogic(self, temp):
        stuTemp = self.student_py_module.fahrenheit_to_celsius(temp)
        keyTemp = self.key_py_module.fahrenheit_to_celsius(temp)
        self.assertAlmostEqual(
            stuTemp,
            keyTemp,
            places=4,
            msg=f'{temp}F should be {keyTemp}C, not {stuTemp}C.')

    def testFreezingPoint(self):
        freezingTempF = 32.0
        self.mainAssertLogic(freezingTempF)
    
    def testBoilingPoint(self):
        boilingTempF = 212.0
        self.mainAssertLogic(boilingTempF)

if __name__ == '__main__':
    unittest.main()
```

Things to note about this example:
- ```__unittest = True``` has the effect of suppressing parts of error tracebacks which originate from within testing code, and which can eb confusing to students.
- ```key_source_files``` is a list of files which constitute the instructors solution. They are ignored when searching for student's files.
- There are other important options which may be specified as class attributes in ```VPLTestCase``` subclasses. They are:
   - ```ignore_files``` - a list of files which should be ignored by vpltools. (e.g., starter code or alternative solutions)
   - ```skip_basic_tests``` - (Python submissions only) list of tests which should be skipped when importing student solutions. Basic tests are not run on Instructor solutions. To skip all basic tests, set this to ```vpltools.BASIC_TESTS```.
   - ```include_pylint``` - (Python submissions only) boolean flag indicating if a Pylint case should be added to the evaluate cases file.

### Example Use - End-to-End Testing


## Other Programming Assignments
In addition to ```VPLTestCase``` VPLTools also provides some classes which support other, more specific types of programming assignments:
 - ```HistorySearcher``` for command-line tutorial assignments which ask students to submit a list of their command history.
- ```RegexTestCase``` for assignments which ask students to submit a regular expression pattern.

# To Do
- Add a method for defining a set of permitted programming languages.
- Add a method for writing student and key output files to memory mapped files, for speed.
- Add a method for writing each test output file from the key program to a separate file, so that they can be cached, for speed.
- SQL Unittets need their 
    ```vpltools.make_vpl_evaluate_cases(__file__, locals(), include_pylint=False)``` at the bottom rolled into a ```tearDownClass``` method. This goes for all the various types of tests. NO BOILERPLATE.
- Add other basic tests?
- publish this to PPI?

# Snippet
You can use this exactly in your test files. **Note:** There is a snippet for this boilerplate in ```/.vscode```. The format of the snippet (JSON) is a little specific to VSCode, but the code can be extracted relatively easily. Type ```test``` in a snakefile to trigger the snippet. 

### Using Key Output Files instead of Re-running Key program each time.
This can speed up submission processing. See the ```VPLTestCase.use_pre_computed_key```.

## Installation
1. Download this repository.
2. Navigate (i.e. ```cd```) into the top-level folder of the repository. You should see a file called ```pyproject.toml```.
3. In a terminal, run ```python3 -m pip install .``` to install the program. You may want to install this in "editable" mode by adding ```-e``` or ```--editable```:
```python3 -m pip install --editable .```

__Note:__ To use this with Moodle VPLs, you will need to install this package into your Moodle VPLJail manually. At time of writing, ```vpltools``` is NOT in the Python Package Index.

## Build Process
1. Navigate to top level directory.
2. Install ```build``` if necessary:
   
   ```python3 -m pip install --upgrade build```

3. Build ```vpltools```:

   ```python3 -m build```

4. Install ```vpltools``` in editable mode (in case you find bugs):

   ```python3 -m pip install --editable .```

5. Check that the module is importable:

   ```cd ../``` Get out of the directory where the module actually lives. That'll cheat on the importing test.

   ```python3 -m vpltools```

   You should see a list of all the python modules you have in the directory where the command was run.

## Notes for Contributors:
- Consider installing this for each of your local Python 3 installations, e.g., CPython, and Anaconda. This may save a headache when the wrong one is invoked, and everything breaks unexpectedly.
- The directory structure is minimal. I had difficulty ensuring that the *package* was importable with ```import vpltools```rather than with ```from vpltools import vpltools``` or ```vpltools.vpltools```. If you know more about the packaging and distribution of Python projects than I do (it wouldn't take much) feel free to suggest a new organization.


# Python packaging Tutorial Commands
This module was packaged by following and adapting to the [Python.org packaging tutorial](https://packaging.python.org/en/latest/tutorials/packaging-projects/), around January 2024.
A summary of the commands used is below, along with the suggested directory structure:
```
~/Documents/vpltools/
   |- tests/
   |- src/
   |  |- vpltools/
   |  |  `- example.py
   |  |  `- __init__.py
   `- license.txt
   `- readme.md
   `- pyproject.toml
```

The commands are fun from within the top-level module directory: ```~/Documents/vpltools/```
```
$ python3.10 -m pip install --upgrade build  # failed?
$ python3.10 -m build                        # failed to create virtual environment
$ sudo apt-install python3.10-venv           # OK with password
$ python3.10 -m build                        # Build succeeded
```

But usually, if everything is installed, you can just:
1. Make edits to the package.
2. Edit the version number in pyproject.toml (with ```vim pyproject.toml```)
3. Rebuild the package with ```$ python3.10 -m build```
4. Reinstall the package with ```$ python3.10 pip install . --editable``` (Of course, this shouldn't be necessary, but the version number won't change unless you do this.)
